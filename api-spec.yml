------------------------------------------------------------------------------------------------------------------------------------------
openapi: 3.0.0
info:
  title: Restaurant Management API
  version: 1.0.0
  description: API to manage restaurants in the restaurant reservation system.
servers:
  - url: https://localhost:7051
    description: Local server

paths:
  /api/restaurants:
    get:
      summary: Get all restaurants
      tags:
        - Restaurants
      responses:
        '200':
          description: Successfully retrieved all restaurants
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Restaurant'
              examples:
                example-1:
                  summary: Example Response
                  value:
                    - restaurantId: 1
                      name: "Amber Grill"
                      location: "Tvirtovės al. 37, Kaunas"
                      phoneNumber: "+370 692 51444"
                      email: "ambergrill@gmail.com"
                      openingHours: "11:00 - 22:00"
                      description: "Best place to eat grill"
                    - restaurantId: 2
                      name: "Two Senses"
                      location: "K. Donelaičio g. 27, Kaunas"
                      phoneNumber: "+370 37 306226"
                      email: "info.kaunas@radisson.com"
                      openingHours: "11:00 - 23:00"
                      description: "events, lunch, food and more"
        '404':
          description: No restaurants found
        '500':
          description: Internal server error
    post:
      summary: Create a new restaurant
      tags:
        - Restaurants
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RestaurantDTO'
            example:
              name: "Restaurant A"
              location: "123 Main Street"
              phoneNumber: "+3706529845613"
              email: "contact.restaurant@gmail.com"
              openingHours: "9:00 - 21:00"
              description: "A fine dining restaurant"
      responses:
        '201':
          description: Restaurant created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Restaurant'
              example:
                restaurantId: 15
                name: "Restaurant A"
		        location: "123 Main Street"
		        phoneNumber: "+3706529845613"
		        email: "contact.restaurant@gmail.com"
		        openingHours: "9:00 - 21:00"
		        description: "A fine dining restaurant"
        '400':
          description: Invalid input
	    '422':
	       description: Email must contain an '@' symbol.
        '500':
          description: Internal server error

  /api/restaurants/{id}:
    get:
      summary: Get a specific restaurant by ID
      tags:
        - Restaurants
      parameters:
        - name: id
          in: path
          required: true
          description: Restaurant ID
          schema:
            type: integer
      responses:
        '200':
          description: Successfully retrieved the restaurant
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Restaurant'
              example:
                restaurantId: 1
                name: "Amber Grill"
                location: "Tvirtovės al. 37, Kaunas"
                phoneNumber: "+370 692 51444"
                email: "ambergrill@gmail.com"
                openingHours: "11:00 - 22:00"
                description: "Best place to eat grill"
        '404':
          description: Restaurant not found
        '500':
          description: Internal server error
    put:
      summary: Update a specific restaurant by ID
      tags:
        - Restaurants
      parameters:
        - name: id
          in: path
          required: true
          description: Restaurant ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RestaurantDTO'
            example:
              name: "Updated Restaurant A"
	          location: "123 Main Street"
	          phoneNumber: "+3706529845613"
	          email: "contact.restaurant@gmail.com"
	          openingHours: "9:00 - 21:00"
	          description: "A fine dining restaurant"
      responses:
        '204':
          description: Restaurant updated successfully
        '400':
          description: Invalid input
	    '422':
	      description: Email must contain an '@' symbol.
        '404':
          description: Restaurant not found
        '500':
          description: Internal server error
    delete:
      summary: Delete a specific restaurant by ID
      tags:
        - Restaurants
      parameters:
        - name: id
          in: path
          required: true
          description: Restaurant ID
          schema:
            type: integer
      responses:
        '204':
          description: Restaurant deleted successfully
        '404':
          description: Restaurant not found
        '500':
          description: Internal server error

components:
  schemas:
    Restaurant:
      type: object
      properties:
        restaurantId:
          type: integer
          description: The unique ID of the restaurant
        name:
          type: string
          description: Name of the restaurant
        location:
          type: string
          description: Location of the restaurant
        phoneNumber:
          type: string
          description: Phone number of the restaurant
        email:
          type: string
          description: Email of the restaurant
        openingHours:
          type: string
          description: Opening hours of the restaurant
        description:
          type: string
          description: Description of the restaurant
    RestaurantDTO:
      type: object
      properties:
        name:
          type: string
        location:
          type: string
        phoneNumber:
          type: string
        email:
          type: string
        openingHours:
          type: string
        description:
          type: string
------------------------------------------------------------------------------------------------------------------------------------------
openapi: 3.0.0
info:
  title: Restaurant Table Management API
  version: 1.0.0
  description: API to manage tables within a restaurant.
servers:
  - url: https://localhost:7051
    description: Local server

paths:
  /api/restaurants/{restaurantId}/tables:
    get:
      summary: Get all tables in a restaurant
      tags:
        - Tables
      parameters:
        - name: restaurantId
          in: path
          required: true
          description: ID of the restaurant to fetch tables for
          schema:
            type: integer
      responses:
        '200':
          description: Successfully retrieved tables
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Table'
              examples:
                example-1:
                  summary: Example Response
                  value:
                    - tableId: 1
                      restaurantId: 1
                      tableNumber: 1
                      capacity: 2
                    - tableId: 2
                      restaurantId: 1
                      tableNumber: 2
                      capacity: 4
        '404':
          description: Restaurant or tables not found
        '500':
          description: Internal server error
    post:
      summary: Create a new table in a restaurant
      tags:
        - Tables
      parameters:
        - name: restaurantId
          in: path
          required: true
          description: ID of the restaurant to create a table for
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TableDTO'
            example:
              tableNumber: 6
              capacity: 2
      responses:
        '201':
          description: Table created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Table'
              example:
                tableId: 14
                restaurantId: 1
                tableNumber: 6
                capacity: 2
        '400':
          description: Invalid input
	    '422':
	      description: Capacity can't be 0 or less.
        '404':
          description: Restaurant not found
        '500':
          description: Internal server error

  /api/restaurants/{restaurantId}/tables/{id}:
    get:
      summary: Get a specific table by ID in a restaurant
      tags:
        - Tables
      parameters:
        - name: restaurantId
          in: path
          required: true
          description: Restaurant ID
          schema:
            type: integer
        - name: id
          in: path
          required: true
          description: Table ID
          schema:
            type: integer
      responses:
        '200':
          description: Successfully retrieved table
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Table'
              example:
                tableId: 1
                restaurantId: 1
                tableNumber: 1
                capacity: 2
        '404':
          description: Table or restaurant not found
        '500':
          description: Internal server error
    put:
      summary: Update a specific table by ID in a restaurant
      tags:
        - Tables
      parameters:
        - name: restaurantId
          in: path
          required: true
          description: Restaurant ID
          schema:
            type: integer
        - name: id
          in: path
          required: true
          description: Table ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TableDTO'
            example:
              tableNumber: 6
              capacity: 4
      responses:
        '204':
          description: Table updated successfully
        '400':
          description: Invalid input
	    '422':
	      description: Capacity can't be 0 or less.
        '404':
          description: Table or restaurant not found
        '500':
          description: Internal server error
    delete:
      summary: Delete a specific table by ID in a restaurant
      tags:
        - Tables
      parameters:
        - name: restaurantId
          in: path
          required: true
          description: Restaurant ID
          schema:
            type: integer
        - name: id
          in: path
          required: true
          description: Table ID
          schema:
            type: integer
      responses:
        '204':
          description: Table deleted successfully
        '404':
          description: Table or restaurant not found
        '500':
          description: Internal server error

components:
  schemas:
    Table:
      type: object
      properties:
        tableId:
          type: integer
          description: The unique ID of the table
        restaurantId:
          type: integer
          description: The ID of the restaurant that the table belongs to
        tableNumber:
          type: string
          description: The table number
        capacity:
          type: integer
          description: Capacity of the table (number of guests)
    TableDTO:
      type: object
      properties:
        tableNumber:
          type: string
        capacity:
          type: integer

------------------------------------------------------------------------------------------------------------------------------------------
openapi: 3.0.0
info:
  title: Table Reservation Management API
  version: 1.0.0
  description: API to manage reservations for specific tables at restaurants.
servers:
  - url: https://localhost:7051
    description: Local server

paths:
  /api/tables/{tableId}/reservations:
    get:
      summary: Get all reservations for a specific table
      tags:
        - Reservations
      parameters:
        - name: tableId
          in: path
          required: true
          description: ID of the table to fetch reservations for
          schema:
            type: integer
      responses:
        '200':
          description: Successfully retrieved reservations for the table
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Reservation'
              examples:
                example-1:
                  summary: Example Response
                  value:
                    - reservationId: 1
                      tableId: 1
                      guestName: "Edvinas"
                      guestPhoneNumber: "+37061234567"
                      reservationStart: "2024-09-24T12:00:00Z"
                      reservationEnd: "2024-09-24T13:00:00Z"
                      numberOfGuests: 2
                    - reservationId: 2
                      tableId: 6
                      guestName: "Vardenis"
                      guestPhoneNumber: "+37062695876"
                      reservationStart: "2024-09-26T19:00:00Z"
                      reservationEnd: "2024-09-26T20:00:00Z"
                      numberOfGuests: 4
		              specialRequests: "Decorate table with black and white colors"
        '404':
          description: No reservations found for the table
        '500':
          description: Internal server error
    post:
      summary: Create a new reservation for a specific table
      tags:
        - Reservations
      parameters:
        - name: tableId
          in: path
          required: true
          description: ID of the table to create a reservation for
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReservationDTO'
            example:
              guestName: "Edvinas"
              guestPhoneNumber: "+37061234567"
              reservationStart: "2024-09-26T12:00:00Z"
              reservationEnd: "2024-09-26T14:00:00Z"
              numberOfGuests: 2
              specialRequests: ""
      responses:
        '201':
          description: Reservation created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
              example:
                reservationId: 11
                tableId: 1
                guestName: "Edvinas"
                guestPhoneNumber: "+37061234567"
                reservationStart: "2024-09-26T12:00:00Z"
                reservationEnd: "2024-09-26T14:00:00Z"
                numberOfGuests: 2
                specialRequests: ""
        '400':
          description: Invalid input
	    '422':
	      description: Number of guests cannot exceed the table's capacity.
        '404':
          description: Table not found
        '500':
          description: Internal server error

  /api/tables/{tableId}/reservations/{id}:
    get:
      summary: Get a specific reservation for a table by ID
      tags:
        - Reservations
      parameters:
        - name: tableId
          in: path
          required: true
          description: Table ID
          schema:
            type: integer
        - name: id
          in: path
          required: true
          description: Reservation ID
          schema:
            type: integer
      responses:
        '200':
          description: Successfully retrieved reservation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
              example:
                reservationId: 1
                tableId: 1
                guestName: "Edvinas"
                guestPhoneNumber: "+37061234567"
                reservationStart: "2024-09-24T12:00:00Z"
                reservationEnd: "2024-09-24T13:00:00Z"
                numberOfGuests: 2
        '404':
          description: Reservation not found for the table
        '500':
          description: Internal server error
    put:
      summary: Update a specific reservation for a table by ID
      tags:
        - Reservations
      parameters:
        - name: tableId
          in: path
          required: true
          description: Table ID
          schema:
            type: integer
        - name: id
          in: path
          required: true
          description: Reservation ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReservationDTO'
            example:
              guestName: "Edvinas"
              guestPhoneNumber: "+37061234567"
              reservationStart: "2024-09-26T12:00:00Z"
              reservationEnd: "2024-09-26T15:00:00Z"
              numberOfGuests: 2
              specialRequests: ""
      responses:
        '204':
          description: Reservation updated successfully
        '400':
          description: Invalid input
	'422':
	  description: Number of guests cannot exceed the table's capacity.
        '404':
          description: Reservation or table not found
        '500':
          description: Internal server error
    delete:
      summary: Delete a specific reservation for a table by ID
      tags:
        - Reservations
      parameters:
        - name: tableId
          in: path
          required: true
          description: Table ID
          schema:
            type: integer
        - name: id
          in: path
          required: true
          description: Reservation ID
          schema:
            type: integer
      responses:
        '204':
          description: Reservation deleted successfully
        '404':
          description: Reservation or table not found
        '500':
          description: Internal server error

components:
  schemas:
    Reservation:
      type: object
      properties:
        reservationId:
          type: integer
          description: The unique ID of the reservation
        tableId:
          type: integer
          description: The ID of the table for the reservation
        guestName:
          type: string
          description: The name of the guest making the reservation
        guestPhoneNumber:
          type: string
          description: The phone number of the guest
        reservationStart:
          type: string
          format: date-time
          description: The start time of the reservation
        reservationEnd:
          type: string
          format: date-time
          description: The end time of the reservation
        numberOfGuests:
          type: integer
          description: The number of guests for the reservation
        specialRequests:
          type: string
          description: Special requests for the reservation (optional)
    ReservationDTO:
      type: object
      properties:
        guestName:
          type: string
        guestPhoneNumber:
          type: string
        reservationStart:
          type: string
          format: date-time
        reservationEnd:
          type: string
          format: date-time
        numberOfGuests:
          type: integer
        specialRequests:
          type: string
          description: Optional special requests
    ReservationResponseDTO:
      type: object
      properties:
	reservationId:
	  type: int
        guestName:
          type: string
        guestPhoneNumber:
          type: string
        reservationStart:
          type: string
          format: date-time
        reservationEnd:
          type: string
          format: date-time
        numberOfGuests:
          type: integer
        specialRequests:
          type: string
          description: Optional special requests


